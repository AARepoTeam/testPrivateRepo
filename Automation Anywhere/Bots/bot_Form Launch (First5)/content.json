{"triggers":[],"nodes":[{"uid":"107c30be-1bc0-4843-af40-05d26415c274","commandName":"step","packageName":"Step","disabled":false,"children":[{"uid":"8b1bcf34-3e96-4c98-abdd-94d13e13ed9d","commandName":"step","packageName":"Step","disabled":false,"children":[{"uid":"c39b8d59-97e9-48e7-bfc5-c7fded5616bb","commandName":"captureWindow","packageName":"Screen","disabled":false,"attributes":[{"name":"windowTitle","value":{"type":"WINDOW","expression":"$window-1$"}},{"name":"filePath","value":{"type":"FILE","string":"file:///D:/Form%20UI%20Testing/actual(first5)_beforeSet.PNG"}},{"name":"isOverwriteFile","value":{"type":"BOOLEAN","boolean":true}}]},{"uid":"6aa9c076-ac2a-466f-b07f-daa866198372","commandName":"python.commands.openScript","packageName":"Python","disabled":false,"attributes":[{"name":"session","value":{"type":"STRING","string":"before set"}},{"name":"scriptOption","value":{"type":"STRING","string":"SCRIPT"}},{"name":"script","value":{"type":"STRING","string":"# import the necessary packages\ndef compare_image():\n    from skimage.metrics import structural_similarity\n    import imutils\n    import cv2\n\n\n    # load the two input images\n    imageA = cv2.imread(r'D:\\Form UI Testing\\sample(first5)_beforeSet.PNG')\n    imageB = cv2.imread(r'D:\\Form UI Testing\\actual(first5)_beforeSet.PNG')\n    # convert the images to grayscale\n    grayA = cv2.cvtColor(imageA, cv2.COLOR_BGR2GRAY)\n    grayB = cv2.cvtColor(imageB, cv2.COLOR_BGR2GRAY)\n\n    # compute the Structural Similarity Index (SSIM) between the two\n    (score, diff) = structural_similarity(grayA, grayB, full=True)\n    diff = (diff * 255).astype(\"uint8\")\n\n    if score<1.0:\n    \n        # threshold the difference image, followed by finding contours to\n        # obtain the regions of the two input images that differ\n        thresh = cv2.threshold(diff, 0, 255, cv2.THRESH_BINARY_INV | cv2.THRESH_OTSU)[1]\n        cnts = cv2.findContours(thresh.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)\n        cnts = imutils.grab_contours(cnts)\n        # loop over the contours\n        for c in cnts:\n            # compute the bounding box of the contour and then draw the\n            # bounding box on both input images to represent where the two\n            # images differ\n            (x, y, w, h) = cv2.boundingRect(c)\n            cv2.rectangle(imageA, (x, y), (x + w, y + h), (0, 0, 255), 2)\n            cv2.rectangle(imageB, (x, y), (x + w, y + h), (0, 0, 255), 2)\n            \n        # show the output images\n        cv2.imshow(\"Expected Image\", imageA)\n        cv2.imshow(\"Actual Image\", imageB)\n        cv2.waitKey(0)\n        return \"False\"\n    return \"True\"\n\ncompare_image()\n"}},{"name":"version","value":{"type":"STRING","string":"3"}}]},{"uid":"9a634d64-5a17-4fb2-99a7-f6940b725e74","commandName":"python.commands.executeFunction","packageName":"Python","disabled":false,"attributes":[{"name":"session","value":{"type":"STRING","string":"before set"}},{"name":"functionName","value":{"type":"STRING","string":"compare_image"}}]}],"attributes":[{"name":"title","value":{"type":"STRING","string":"Validate before set"}}]},{"uid":"da1737df-d4de-4631-9417-ac52a795f69a","commandName":"step","packageName":"Step","disabled":false,"children":[{"uid":"16c97236-55e4-4a99-9d38-33fd935dfcf8","commandName":"formSetValue","packageName":"Forms","disabled":true,"attributes":[{"name":"formVar","value":{"type":"VARIABLE","variableName":"formLaunch"}},{"name":"formElementId","value":{"type":"FORMELEMENT","formElementId":"CheckBoxGroup0_0","formElementType":"CheckBox"}},{"name":"inputBoolean","value":{"type":"BOOLEAN","boolean":true}}]},{"uid":"6014e1ae-deee-469e-ab27-307ad68ed2a9","commandName":"formSetValue","packageName":"Forms","disabled":true,"attributes":[{"name":"formVar","value":{"type":"VARIABLE","variableName":"formLaunch"}},{"name":"formElementId","value":{"type":"FORMELEMENT","formElementId":"CheckBoxGroup0_1","formElementType":"CheckBox"}},{"name":"inputBoolean","value":{"type":"BOOLEAN","boolean":true}}]},{"uid":"dd9fdb3a-218a-4b9f-858f-724e8689cc74","commandName":"formSetValue","packageName":"Forms","disabled":true,"attributes":[{"name":"formVar","value":{"type":"VARIABLE","variableName":"formLaunch"}},{"name":"formElementId","value":{"type":"FORMELEMENT","formElementId":"Date0","formElementType":"Date"}},{"name":"inputDate","value":{"type":"DATETIME","string":"2020-12-31T00:00:00+05:30[Asia/Calcutta]"}}]},{"uid":"906e1491-90b4-41ef-9e7c-14443c876421","commandName":"formSetValue","packageName":"Forms","disabled":true,"attributes":[{"name":"formVar","value":{"type":"VARIABLE","variableName":"formLaunch"}},{"name":"formElementId","value":{"type":"FORMELEMENT","formElementId":"Document0","formElementType":"Document"}},{"name":"inputText","value":{"type":"STRING","string":"D:\\Form UI Testing\\Repository\\AA Logo.PNG"}}]},{"uid":"9de708d1-4904-4f38-ada6-e92cff2a7d79","commandName":"formSetValue","packageName":"Forms","disabled":true,"attributes":[{"name":"formVar","value":{"type":"VARIABLE","variableName":"formLaunch"}},{"name":"formElementId","value":{"type":"FORMELEMENT","formElementId":"Dropdown0","formElementType":"Dropdown"}},{"name":"inputText","value":{"type":"STRING","string":"OptionC"}}]}],"attributes":[{"name":"title","value":{"type":"STRING","string":"set"}}]},{"uid":"c9457f80-f671-48c3-b304-bda5a04f87f1","commandName":"delay","packageName":"Delay","disabled":false,"attributes":[{"name":"delayType","value":{"type":"STRING","string":"REGULAR"}},{"name":"delayTime","value":{"type":"NUMBER","number":"2"}},{"name":"timeUnit","value":{"type":"STRING","string":"SECONDS"}}]},{"uid":"8942c565-a67a-47e6-9c4a-986509ffa4e4","commandName":"step","packageName":"Step","disabled":false,"children":[{"uid":"0d7c504e-5933-4942-85e0-388eb8ca1aec","commandName":"captureWindow","packageName":"Screen","disabled":false,"attributes":[{"name":"windowTitle","value":{"type":"WINDOW","expression":"$window-1$"}},{"name":"filePath","value":{"type":"FILE","string":"file:///D:/Form%20UI%20Testing/actual(first5)_afterSet.PNG"}},{"name":"isOverwriteFile","value":{"type":"BOOLEAN","boolean":true}}]},{"uid":"86172ed0-f263-48b8-bc0e-aa3d03af87e5","commandName":"python.commands.openScript","packageName":"Python","disabled":false,"attributes":[{"name":"session","value":{"type":"STRING","string":"after set"}},{"name":"scriptOption","value":{"type":"STRING","string":"SCRIPT"}},{"name":"script","value":{"type":"STRING","string":"# import the necessary packages\ndef compare_image():\n    from skimage.metrics import structural_similarity\n    import imutils\n    import cv2\n\n\n    # load the two input images\n    imageA = cv2.imread(r'D:\\Form UI Testing\\sample(first5)_afterSet.PNG')\n    imageB = cv2.imread(r'D:\\Form UI Testing\\actual(first5)_afterSet.PNG')\n    # convert the images to grayscale\n    grayA = cv2.cvtColor(imageA, cv2.COLOR_BGR2GRAY)\n    grayB = cv2.cvtColor(imageB, cv2.COLOR_BGR2GRAY)\n\n    # compute the Structural Similarity Index (SSIM) between the two\n    (score, diff) = structural_similarity(grayA, grayB, full=True)\n    diff = (diff * 255).astype(\"uint8\")\n\n    if score<1.0:\n    \n        # threshold the difference image, followed by finding contours to\n        # obtain the regions of the two input images that differ\n        thresh = cv2.threshold(diff, 0, 255, cv2.THRESH_BINARY_INV | cv2.THRESH_OTSU)[1]\n        cnts = cv2.findContours(thresh.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)\n        cnts = imutils.grab_contours(cnts)\n        # loop over the contours\n        for c in cnts:\n            # compute the bounding box of the contour and then draw the\n            # bounding box on both input images to represent where the two\n            # images differ\n            (x, y, w, h) = cv2.boundingRect(c)\n            cv2.rectangle(imageA, (x, y), (x + w, y + h), (0, 0, 255), 2)\n            cv2.rectangle(imageB, (x, y), (x + w, y + h), (0, 0, 255), 2)\n            \n        # show the output images\n        cv2.imshow(\"Expected Image\", imageA)\n        cv2.imshow(\"Actual Image\", imageB)\n        cv2.waitKey(0)\n        return \"False\"\n    return \"True\"\n\ncompare_image()\n"}},{"name":"version","value":{"type":"STRING","string":"3"}}]},{"uid":"a8e47964-5d36-4996-b7b2-2a5e8ee2b47e","commandName":"python.commands.executeFunction","packageName":"Python","disabled":false,"attributes":[{"name":"session","value":{"type":"STRING","string":"after set"}},{"name":"functionName","value":{"type":"STRING","string":"compare_image"}}]}],"attributes":[{"name":"title","value":{"type":"STRING","string":"Validate after set"}}]}],"attributes":[{"name":"title","value":{"type":"STRING","string":"Validate"}}]}],"variables":[{"name":"prompt-assignment","description":"A variable you can use for assignments","type":"STRING","subtype":"UNDEFINED","readOnly":false,"input":false,"output":false},{"name":"window-1","description":"","type":"WINDOW","readOnly":true,"input":false,"output":false,"defaultValue":{"type":"WINDOW","window":{"name":"Form title","path":"C:\\Program Files\\Automation Anywhere\\Bot Agent\\jre\\bin\\javaw.exe","class":"GlassWndClass-GlassWindowClass-3","handle":"657450","isChild":false,"location":{"top":87,"left":16},"size":{"height":600,"width":860},"presetType":"NONE","windowType":"NATIVE","browserTabUrl":""}}}],"breakpoints":[],"packages":[{"name":"Delay","version":"2.2.0-20201014-042532"},{"name":"Forms","version":"2.17.3-20201102-103733"},{"name":"Python","version":"2.3.0-20201105-204912"},{"name":"Screen","version":"2.1.0-20201014-043037"},{"name":"Step","version":"2.0.0-20201023-202658"}],"migrationJournalReviewIds":[],"workItemTemplateName":null}