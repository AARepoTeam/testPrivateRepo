{"triggers":[],"nodes":[{"uid":"13f89a18-bb51-4bad-9ff7-a01e0664a92a","commandName":"step","packageName":"Step","disabled":false,"children":[{"uid":"ff2f3d83-6be8-42da-acfc-da8a29c54fa3","commandName":"step","packageName":"Step","disabled":false,"children":[{"uid":"72d247e9-52e0-4be7-bf69-f3dba436742c","commandName":"captureWindow","packageName":"Screen","disabled":false,"attributes":[{"name":"windowTitle","value":{"type":"WINDOW","expression":"$window-1$"}},{"name":"filePath","value":{"type":"FILE","string":"file:///D:/Form%20UI%20Testing/actual(second5)_beforeSet.PNG"}},{"name":"isOverwriteFile","value":{"type":"BOOLEAN","boolean":true}}]},{"uid":"ab6e053d-c78d-4c71-a65a-f741bafa3f31","commandName":"python.commands.openScript","packageName":"Python","disabled":false,"attributes":[{"name":"session","value":{"type":"STRING","string":"before set"}},{"name":"scriptOption","value":{"type":"STRING","string":"SCRIPT"}},{"name":"script","value":{"type":"STRING","string":"# import the necessary packages\ndef compare_image():\n    from skimage.metrics import structural_similarity\n    import imutils\n    import cv2\n\n\n    # load the two input images\n    imageA = cv2.imread(r'D:\\Form UI Testing\\sample(second5)_beforeSet.PNG')\n    imageB = cv2.imread(r'D:\\Form UI Testing\\actual(second5)_beforeSet.PNG')\n    # convert the images to grayscale\n    grayA = cv2.cvtColor(imageA, cv2.COLOR_BGR2GRAY)\n    grayB = cv2.cvtColor(imageB, cv2.COLOR_BGR2GRAY)\n\n    # compute the Structural Similarity Index (SSIM) between the two\n    (score, diff) = structural_similarity(grayA, grayB, full=True)\n    diff = (diff * 255).astype(\"uint8\")\n\n    if score<1.0:\n    \n        # threshold the difference image, followed by finding contours to\n        # obtain the regions of the two input images that differ\n        thresh = cv2.threshold(diff, 0, 255, cv2.THRESH_BINARY_INV | cv2.THRESH_OTSU)[1]\n        cnts = cv2.findContours(thresh.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)\n        cnts = imutils.grab_contours(cnts)\n        # loop over the contours\n        for c in cnts:\n            # compute the bounding box of the contour and then draw the\n            # bounding box on both input images to represent where the two\n            # images differ\n            (x, y, w, h) = cv2.boundingRect(c)\n            cv2.rectangle(imageA, (x, y), (x + w, y + h), (0, 0, 255), 2)\n            cv2.rectangle(imageB, (x, y), (x + w, y + h), (0, 0, 255), 2)\n            \n        # show the output images\n        cv2.imshow(\"Expected Image\", imageA)\n        cv2.imshow(\"Actual Image\", imageB)\n        cv2.waitKey(0)\n        return \"False\"\n    return \"True\"\n\ncompare_image()\n"}},{"name":"version","value":{"type":"STRING","string":"3"}}]},{"uid":"6e0129a2-4ffc-40ce-9921-a9a21845ad08","commandName":"python.commands.executeFunction","packageName":"Python","disabled":false,"attributes":[{"name":"session","value":{"type":"STRING","string":"before set"}},{"name":"functionName","value":{"type":"STRING","string":"compare_image"}}]}],"attributes":[{"name":"title","value":{"type":"STRING","string":"Validate before set"}}]},{"uid":"6fec3c73-3e92-4826-9a10-5c50b74adce1","commandName":"step","packageName":"Step","disabled":false,"children":[{"uid":"900d5606-3aa6-4296-b9f7-58fbaac1a9f0","commandName":"formSetValue","packageName":"Forms","disabled":true,"attributes":[{"name":"formVar","value":{"type":"VARIABLE","variableName":"formLaunch"}},{"name":"formElementId","value":{"type":"FORMELEMENT","formElementId":"File0","formElementType":"File"}},{"name":"inputText","value":{"type":"STRING","string":"D:\\Form UI Testing\\Repository\\AA Logo.PNG"}}]},{"uid":"d28b8545-0827-4fe9-bc7e-fc254de9992c","commandName":"formSetValue","packageName":"Forms","disabled":true,"attributes":[{"name":"formVar","value":{"type":"VARIABLE","variableName":"formLaunch"}},{"name":"formElementId","value":{"type":"FORMELEMENT","formElementId":"Image0","formElementType":"Image"}},{"name":"inputText","value":{"type":"STRING","string":"D:\\Form UI Testing\\Repository\\AA Logo.PNG"}}]},{"uid":"737d88a0-8f9b-4d4b-a945-c87a50eefd0b","commandName":"formSetValue","packageName":"Forms","disabled":true,"attributes":[{"name":"formVar","value":{"type":"VARIABLE","variableName":"formLaunch"}},{"name":"formElementId","value":{"type":"FORMELEMENT","formElementId":"Label0","formElementType":"Label"}},{"name":"inputText","value":{"type":"STRING","string":"Forms E2E"}}]},{"uid":"261cec25-d1e4-4941-9361-d32dce22942a","commandName":"formSetValue","packageName":"Forms","disabled":true,"attributes":[{"name":"formVar","value":{"type":"VARIABLE","variableName":"formLaunch"}},{"name":"formElementId","value":{"type":"FORMELEMENT","formElementId":"Number0","formElementType":"Number"}},{"name":"inputNumber","value":{"type":"NUMBER","number":"1001"}}]}],"attributes":[{"name":"title","value":{"type":"STRING","string":"set"}}]},{"uid":"6ba16fec-6083-4890-8c7d-0a2df8ba44c5","commandName":"delay","packageName":"Delay","disabled":false,"attributes":[{"name":"delayType","value":{"type":"STRING","string":"REGULAR"}},{"name":"delayTime","value":{"type":"NUMBER","number":"2"}},{"name":"timeUnit","value":{"type":"STRING","string":"SECONDS"}}]},{"uid":"ccb298af-5ca3-45af-8a67-43990e34bd54","commandName":"step","packageName":"Step","disabled":false,"children":[{"uid":"88dc3231-b0d4-4da1-9c4e-c724b51a5e56","commandName":"captureWindow","packageName":"Screen","disabled":false,"attributes":[{"name":"windowTitle","value":{"type":"WINDOW","expression":"$window-1$"}},{"name":"filePath","value":{"type":"FILE","string":"file:///D:/Form%20UI%20Testing/actual(second5)_afterSet.PNG"}},{"name":"isOverwriteFile","value":{"type":"BOOLEAN","boolean":true}}]},{"uid":"a5a24d00-0271-4fad-b6c2-3b42f86aa452","commandName":"python.commands.openScript","packageName":"Python","disabled":false,"attributes":[{"name":"session","value":{"type":"STRING","string":"after set"}},{"name":"scriptOption","value":{"type":"STRING","string":"SCRIPT"}},{"name":"script","value":{"type":"STRING","string":"# import the necessary packages\ndef compare_image():\n    from skimage.metrics import structural_similarity\n    import imutils\n    import cv2\n\n\n    # load the two input images\n    imageA = cv2.imread(r'D:\\Form UI Testing\\sample(second5)_afterSet.PNG')\n    imageB = cv2.imread(r'D:\\Form UI Testing\\actual(second5)_afterSet.PNG')\n    # convert the images to grayscale\n    grayA = cv2.cvtColor(imageA, cv2.COLOR_BGR2GRAY)\n    grayB = cv2.cvtColor(imageB, cv2.COLOR_BGR2GRAY)\n\n    # compute the Structural Similarity Index (SSIM) between the two\n    (score, diff) = structural_similarity(grayA, grayB, full=True)\n    diff = (diff * 255).astype(\"uint8\")\n\n    if score<1.0:\n    \n        # threshold the difference image, followed by finding contours to\n        # obtain the regions of the two input images that differ\n        thresh = cv2.threshold(diff, 0, 255, cv2.THRESH_BINARY_INV | cv2.THRESH_OTSU)[1]\n        cnts = cv2.findContours(thresh.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)\n        cnts = imutils.grab_contours(cnts)\n        # loop over the contours\n        for c in cnts:\n            # compute the bounding box of the contour and then draw the\n            # bounding box on both input images to represent where the two\n            # images differ\n            (x, y, w, h) = cv2.boundingRect(c)\n            cv2.rectangle(imageA, (x, y), (x + w, y + h), (0, 0, 255), 2)\n            cv2.rectangle(imageB, (x, y), (x + w, y + h), (0, 0, 255), 2)\n            \n        # show the output images\n        cv2.imshow(\"Expected Image\", imageA)\n        cv2.imshow(\"Actual Image\", imageB)\n        cv2.waitKey(0)\n        return \"False\"\n    return \"True\"\n\ncompare_image()\n"}},{"name":"version","value":{"type":"STRING","string":"3"}}]},{"uid":"d2189907-da06-4123-a91b-6373598b393c","commandName":"python.commands.executeFunction","packageName":"Python","disabled":false,"attributes":[{"name":"session","value":{"type":"STRING","string":"after set"}},{"name":"functionName","value":{"type":"STRING","string":"compare_image"}}]}],"attributes":[{"name":"title","value":{"type":"STRING","string":"Validate after set"}}]}],"attributes":[{"name":"title","value":{"type":"STRING","string":"Validate"}}]}],"variables":[{"name":"prompt-assignment","description":"A variable you can use for assignments","type":"STRING","subtype":"UNDEFINED","readOnly":false,"input":false,"output":false},{"name":"window-1","description":"","type":"WINDOW","readOnly":true,"input":false,"output":false,"defaultValue":{"type":"WINDOW","window":{"name":"Form title","path":"C:\\Program Files\\Automation Anywhere\\Bot Agent\\jre\\bin\\javaw.exe","class":"GlassWndClass-GlassWindowClass-3","handle":"657450","isChild":false,"location":{"top":87,"left":16},"size":{"height":600,"width":860},"presetType":"NONE","windowType":"NATIVE","browserTabUrl":""}}}],"breakpoints":[],"packages":[{"name":"Delay","version":"2.2.0-20201014-042532"},{"name":"Forms","version":"2.17.3-20201102-103733"},{"name":"Python","version":"2.3.0-20201105-204912"},{"name":"Screen","version":"2.1.0-20201014-043037"},{"name":"Step","version":"2.0.0-20201023-202658"}],"migrationJournalReviewIds":[],"workItemTemplateName":null}